{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Crossover Explorer The crossover explorer is an application that filters and displays SNPs, with the goal of looking for evidence of crossover and non-crossover events in C. elegans genomes. The application uses two sets of data: BSP_TIGER.marker_dataframe.pickle.gzip is a \"pickled\" and compressed Pandas data frame with the output from TIGER. Each row in the frame describes a SNP, with columns for the chromosome name, location, and the predicted parent genome (N2 or CB4856), and more. BSP_TIGER.intervals_dataframe.pickle.gzip , a summary of the SNP data, where each row defines a chromosome segment and its predicted parent. We suggest creating a new folder to use for a project directory. Move (or link) the two data files to this folder, then cd to the directory and run the crossover explorer scripts in that directory. Note for Docker users : if you are running the GUI in a Docker container you will bind mount this same directory when starting the container. Commands To run one of the commands type xo followed by one of the command names ( peaks , gui , or vis ). Each of the commands has its own help message, which you can see by adding --help to the command. Examples This command prints the help message for the top level xo script: $ xo --help usage: xo [-h] {peaks,gui,vis,post} ... options: -h, --help show this help message and exit subcommands: operation to perform {peaks,gui,vis,post} peaks find peaks in the SNP data gui explore blocks of SNPs vis visualizations based on filtered blocks To see the help message for the peaks command: $ xo peaks --help usage: xo peaks [-h] [--snps F] [--output F] [--max_snps N] ... Abbreviating Options The xo scripts, like most modern Unix command line applications, allow users to shorten option names, so that it is only necessary to type enough characters to distinguish one option from another. The full command name ( peaks , gui , or vis ) must be entered completely, but after that any option names can be abbreviated. Example These two commands are equivalent: $ xo peaks --output short_blocks.csv --max_snps 10 $ xo peaks --out short_blocks.csv --m 10","title":"Getting Started"},{"location":"#crossover-explorer","text":"The crossover explorer is an application that filters and displays SNPs, with the goal of looking for evidence of crossover and non-crossover events in C. elegans genomes. The application uses two sets of data: BSP_TIGER.marker_dataframe.pickle.gzip is a \"pickled\" and compressed Pandas data frame with the output from TIGER. Each row in the frame describes a SNP, with columns for the chromosome name, location, and the predicted parent genome (N2 or CB4856), and more. BSP_TIGER.intervals_dataframe.pickle.gzip , a summary of the SNP data, where each row defines a chromosome segment and its predicted parent. We suggest creating a new folder to use for a project directory. Move (or link) the two data files to this folder, then cd to the directory and run the crossover explorer scripts in that directory. Note for Docker users : if you are running the GUI in a Docker container you will bind mount this same directory when starting the container.","title":"Crossover Explorer"},{"location":"#commands","text":"To run one of the commands type xo followed by one of the command names ( peaks , gui , or vis ). Each of the commands has its own help message, which you can see by adding --help to the command.","title":"Commands"},{"location":"#examples","text":"This command prints the help message for the top level xo script: $ xo --help usage: xo [-h] {peaks,gui,vis,post} ... options: -h, --help show this help message and exit subcommands: operation to perform {peaks,gui,vis,post} peaks find peaks in the SNP data gui explore blocks of SNPs vis visualizations based on filtered blocks To see the help message for the peaks command: $ xo peaks --help usage: xo peaks [-h] [--snps F] [--output F] [--max_snps N] ...","title":"Examples"},{"location":"#abbreviating-options","text":"The xo scripts, like most modern Unix command line applications, allow users to shorten option names, so that it is only necessary to type enough characters to distinguish one option from another. The full command name ( peaks , gui , or vis ) must be entered completely, but after that any option names can be abbreviated.","title":"Abbreviating Options"},{"location":"#example","text":"These two commands are equivalent: $ xo peaks --output short_blocks.csv --max_snps 10 $ xo peaks --out short_blocks.csv --m 10","title":"Example"},{"location":"gui/","text":"View SNPs in the GUI The GUI allows users to explore the blocks generated by the peaks command. The window has two parts, as shown by this screenshot: The gui command has options for specifying the data files to use and a network port used by the GUI: $ xo gui --help usage: xo gui [-h] [--intervals F] [--peaks F] [--port N] options: -h, --help show this help message and exit --intervals F SNP summaries --peaks F blocks saved by peaks.py --port N local port for the Panel server Specify the path to the peak data with --peaks option; the default is peaks.csv (the default output name from the xo peaks command) The other data file used by the GUI is a summary of locations of blocks of SNPs. Specify the path to this file with --intervals ; the default is BSP_TIGER.intervals_dataframe.pickle.gzip Panel, the Python library used to display the GUI, is similar to Jupyter. It creates a server on your local system, and you use the GUI by opening a web browser and connecting to the server. The default port number is 5006, but you can specify a different port number if you need to ( e.g. if you have a different Panel app already using that port). Example The simplest workflow is to create a directory and copy (or link) the two pickled dataframes, using their default file names. Run the peaks command with default options: $ xo peaks It will take a few minutes, but the script will show a status line to indicate it's still working. When it's done there will be a file named peaks.csv in the current directory. Run the gui command: $ xo gui loading interval data loading peak data Launching server at http://localhost:5006 That will read the two data files and start the GUI, which uses a web server connected to port 5606. The server should start your default web browser and show a view of the first chromosome in the data set. If you browser doesn't start automatically, just start the browser, open a new window, and enter the URL printed in the terminal window ( http://localhost:5006 in the example above). Exiting the GUI Close the web browser window, and type ^C in the terminal window where you typed the xo view command. Visualizations The visualization command will read the data, apply the same filters available in the GUI, and display the resulting graphic in a window. Currently there are three different visualizations: a histogram of the number of SNPs in each block a histogram of the length (in base pairs) of each block a histogram of the relative location on the chromosome of each block When running the command type xo vis P where P is the type of plot to make, either count , length , or location . The remaining options are: --peaks F blocks saved by peaks.py --chromosomes P names of chromosomes to use --size N N block size range (#SNPs) --length N N block length range (bp) --coverage N minimum coverage --match require genome match The --peaks option specifies the name of the peak data file (same as in the gui command). Selecting a Subset of the Data The --chromosome option lets you select a subset of the data to visualize by specifying a regular expression to match the chromosome name. The default is BSP.* , meaning \"any chromosome with a name that starts with BSP\" (in other words, all chromosomes). Some other examples of name patterns: pattern chromosomes used BSP-OR.* all oocytes BSP-SR.* all spermatocytes BSP-OR-10.* the chromosomes for the 10 worms with names BSP-OR-001, BSP-OR-002, ... BSP-OR-009. BSP-SR-.*-1 chromosome 1 for all spermatocytes Filter Options The remaining options allow you to specify the filters to use. There is one option for each of the filters shown in the GUI, so the plots that are made by this command are accurate summaries based on settings you make in the GUI. Two of the options ( --size and --length ) correspond to the interval selectors and require you to specify two values, the minimum and maximum slider locations. If you don't specify these options the defaults displayed in the GUI are used: block size from 0 to 100 SNPs, block length from 0 to 10,000 bp. The --coverage option is a single integer based on the location of that slider in the GUI. The default is 0. Use --match option if you clicked the checkbox labeled Genome Match. Example This command generates a histogram of block sizes (number of SNPs) using chromosome 1 from all worms, restricted to SNPs that have a genome match and using only blocks between 1 and 1000 bp long: $ xo vis count --chr 'BSP-.*-1' --match --length 0 1000","title":"View SNPs in the GUI"},{"location":"gui/#view-snps-in-the-gui","text":"The GUI allows users to explore the blocks generated by the peaks command. The window has two parts, as shown by this screenshot: The gui command has options for specifying the data files to use and a network port used by the GUI: $ xo gui --help usage: xo gui [-h] [--intervals F] [--peaks F] [--port N] options: -h, --help show this help message and exit --intervals F SNP summaries --peaks F blocks saved by peaks.py --port N local port for the Panel server Specify the path to the peak data with --peaks option; the default is peaks.csv (the default output name from the xo peaks command) The other data file used by the GUI is a summary of locations of blocks of SNPs. Specify the path to this file with --intervals ; the default is BSP_TIGER.intervals_dataframe.pickle.gzip Panel, the Python library used to display the GUI, is similar to Jupyter. It creates a server on your local system, and you use the GUI by opening a web browser and connecting to the server. The default port number is 5006, but you can specify a different port number if you need to ( e.g. if you have a different Panel app already using that port).","title":"View SNPs in the GUI"},{"location":"gui/#example","text":"The simplest workflow is to create a directory and copy (or link) the two pickled dataframes, using their default file names. Run the peaks command with default options: $ xo peaks It will take a few minutes, but the script will show a status line to indicate it's still working. When it's done there will be a file named peaks.csv in the current directory. Run the gui command: $ xo gui loading interval data loading peak data Launching server at http://localhost:5006 That will read the two data files and start the GUI, which uses a web server connected to port 5606. The server should start your default web browser and show a view of the first chromosome in the data set. If you browser doesn't start automatically, just start the browser, open a new window, and enter the URL printed in the terminal window ( http://localhost:5006 in the example above).","title":"Example"},{"location":"gui/#exiting-the-gui","text":"Close the web browser window, and type ^C in the terminal window where you typed the xo view command.","title":"Exiting the GUI"},{"location":"gui/#visualizations","text":"The visualization command will read the data, apply the same filters available in the GUI, and display the resulting graphic in a window. Currently there are three different visualizations: a histogram of the number of SNPs in each block a histogram of the length (in base pairs) of each block a histogram of the relative location on the chromosome of each block When running the command type xo vis P where P is the type of plot to make, either count , length , or location . The remaining options are: --peaks F blocks saved by peaks.py --chromosomes P names of chromosomes to use --size N N block size range (#SNPs) --length N N block length range (bp) --coverage N minimum coverage --match require genome match The --peaks option specifies the name of the peak data file (same as in the gui command).","title":"Visualizations"},{"location":"gui/#selecting-a-subset-of-the-data","text":"The --chromosome option lets you select a subset of the data to visualize by specifying a regular expression to match the chromosome name. The default is BSP.* , meaning \"any chromosome with a name that starts with BSP\" (in other words, all chromosomes). Some other examples of name patterns: pattern chromosomes used BSP-OR.* all oocytes BSP-SR.* all spermatocytes BSP-OR-10.* the chromosomes for the 10 worms with names BSP-OR-001, BSP-OR-002, ... BSP-OR-009. BSP-SR-.*-1 chromosome 1 for all spermatocytes","title":"Selecting a Subset of the Data"},{"location":"gui/#filter-options","text":"The remaining options allow you to specify the filters to use. There is one option for each of the filters shown in the GUI, so the plots that are made by this command are accurate summaries based on settings you make in the GUI. Two of the options ( --size and --length ) correspond to the interval selectors and require you to specify two values, the minimum and maximum slider locations. If you don't specify these options the defaults displayed in the GUI are used: block size from 0 to 100 SNPs, block length from 0 to 10,000 bp. The --coverage option is a single integer based on the location of that slider in the GUI. The default is 0. Use --match option if you clicked the checkbox labeled Genome Match.","title":"Filter Options"},{"location":"gui/#example_1","text":"This command generates a histogram of block sizes (number of SNPs) using chromosome 1 from all worms, restricted to SNPs that have a genome match and using only blocks between 1 and 1000 bp long: $ xo vis count --chr 'BSP-.*-1' --match --length 0 1000","title":"Example"},{"location":"peaks/","text":"Peak Finder This application scans a chromosome to look for sequences of SNPs that are potentially associated with crossover or non-crossover events. The name \"peak finder\" comes from the method we use to look for these events. We define a signal function that is based on counting the number of SNPs. At any location x in the chromosome, let f be the total number of CB4856 SNPs seen up to that point, and let g be the total number of N2 SNPs seen to that point. Then our signal function is simply f \u2212 g . As we move across the chromosome, the signal goes up whenever we encounter a CB4856 SNP and goes down whenever we see an N2 SNP. As an example, suppose a chromosome has a single crossover point, and that before that point all the SNPs are from the CB4856 parent, and after that point all the SNPs are from the N2 parent. The signal will increase monotonically up to that point and then decrease monotonically after that. The signal has one peak, at exactly the location where the crossover occurred. If there are non-crossover events, we expect to see small regions where SNPs from the other parent occur somewhere in the middle of the long sequences before and after the main crossover point. These will appear as small \"blips\" in the signal: a short drop in the region that is otherwise increasing, or a short rise in the region that is otherwise decreasing. We use the find_peaks function from the NumPy signal processing library to look for these regions in our signal function. We define a block to be the set of SNPs from the start to the end of one of the regions identified by the peak finder. The output is a CSV file that has all the SNPs from these blocks. Look for Valleys as Well as Peaks Some chromosomes will have N2 SNPs before the main crossover point and CB4856 SNPs after that. In this case the signal decreases before the crossover and increases after that point, so the crossover is at a location where there is a \"valley\" and not a peak. The NumPy function returns locations of both peaks and valleys, and our code saves locations from each type of \"blip\". Maximum Block Size If a chromosome has a single crossover, the peak finding algorithm will think the sequence from the start of the chromosome up to the crossover location is a block, and the sequence from the crossover point to the end of the chromosome is another block. To prevent these two blocks from being included in the output the script has a block size limit, which is the maximum number of SNPs that can be included in a block. There are also \"pathological\" cases where there are small blips inside a longer region that also stands out from the background. In these situations the peak finder reports the coordinates of the longer enclosing block along with the locations of the smaller blocks nested inside. Choosing a smaller block size limit will prevent the enclosing block from being included in the output while still including the smaller blocks. No Crossover Some chromosomes in the data set have no crossover points. In these situations the peak finder will not find a peak or a valley and the output file will have no blocks for this chromosome. Shell Command To run the peak finder with the default options type $ xo peaks That will read the SNP data from TIGER and write blocks to an output file in CSV format. The default input file name is BSP_TIGER.marker_dataframe.pickle.gzip . A different file name can be specified with the --snps option. The default output file name is peaks.csv . A different name can be specified with --output . The default block size limit is 1000 SNPs. A different value can be specified with the --max_snps option. Output File The data written by this command is saved in a CSV file. Each row in the file is a SNP. The lines are exact copies of the lines from the original input file, including the original SNP ID in the first column. One new column has been appended to each line. This column is a block ID number, which allows the GUI and visualization commands to group SNPs by blocks.","title":"Peak Finder"},{"location":"peaks/#peak-finder","text":"This application scans a chromosome to look for sequences of SNPs that are potentially associated with crossover or non-crossover events. The name \"peak finder\" comes from the method we use to look for these events. We define a signal function that is based on counting the number of SNPs. At any location x in the chromosome, let f be the total number of CB4856 SNPs seen up to that point, and let g be the total number of N2 SNPs seen to that point. Then our signal function is simply f \u2212 g . As we move across the chromosome, the signal goes up whenever we encounter a CB4856 SNP and goes down whenever we see an N2 SNP. As an example, suppose a chromosome has a single crossover point, and that before that point all the SNPs are from the CB4856 parent, and after that point all the SNPs are from the N2 parent. The signal will increase monotonically up to that point and then decrease monotonically after that. The signal has one peak, at exactly the location where the crossover occurred. If there are non-crossover events, we expect to see small regions where SNPs from the other parent occur somewhere in the middle of the long sequences before and after the main crossover point. These will appear as small \"blips\" in the signal: a short drop in the region that is otherwise increasing, or a short rise in the region that is otherwise decreasing. We use the find_peaks function from the NumPy signal processing library to look for these regions in our signal function. We define a block to be the set of SNPs from the start to the end of one of the regions identified by the peak finder. The output is a CSV file that has all the SNPs from these blocks.","title":"Peak Finder"},{"location":"peaks/#look-for-valleys-as-well-as-peaks","text":"Some chromosomes will have N2 SNPs before the main crossover point and CB4856 SNPs after that. In this case the signal decreases before the crossover and increases after that point, so the crossover is at a location where there is a \"valley\" and not a peak. The NumPy function returns locations of both peaks and valleys, and our code saves locations from each type of \"blip\".","title":"Look for Valleys as Well as Peaks"},{"location":"peaks/#maximum-block-size","text":"If a chromosome has a single crossover, the peak finding algorithm will think the sequence from the start of the chromosome up to the crossover location is a block, and the sequence from the crossover point to the end of the chromosome is another block. To prevent these two blocks from being included in the output the script has a block size limit, which is the maximum number of SNPs that can be included in a block. There are also \"pathological\" cases where there are small blips inside a longer region that also stands out from the background. In these situations the peak finder reports the coordinates of the longer enclosing block along with the locations of the smaller blocks nested inside. Choosing a smaller block size limit will prevent the enclosing block from being included in the output while still including the smaller blocks.","title":"Maximum Block Size"},{"location":"peaks/#no-crossover","text":"Some chromosomes in the data set have no crossover points. In these situations the peak finder will not find a peak or a valley and the output file will have no blocks for this chromosome.","title":"No Crossover"},{"location":"peaks/#shell-command","text":"To run the peak finder with the default options type $ xo peaks That will read the SNP data from TIGER and write blocks to an output file in CSV format. The default input file name is BSP_TIGER.marker_dataframe.pickle.gzip . A different file name can be specified with the --snps option. The default output file name is peaks.csv . A different name can be specified with --output . The default block size limit is 1000 SNPs. A different value can be specified with the --max_snps option.","title":"Shell Command"},{"location":"peaks/#output-file","text":"The data written by this command is saved in a CSV file. Each row in the file is a SNP. The lines are exact copies of the lines from the original input file, including the original SNP ID in the first column. One new column has been appended to each line. This column is a block ID number, which allows the GUI and visualization commands to group SNPs by blocks.","title":"Output File"},{"location":"vis/","text":"Crossover Explorer Documentation The crossover explorer is an application that filters and displays SNPs, with the goal of looking for evidence of crossover and non-crossover events in C. elegans genomes. Data Files The application uses two sets of data: BSP_TIGER.marker_dataframe.pickle.gzip is a \"pickled\" and compressed Pandas data frame with the output from TIGER. Each row in the frame describes a SNP, with columns for the chromosome name, location, and the predicted parent genome (N2 or CB4856), and more. BSP_TIGER.intervals_dataframe.pickle.gzip , a summary of the SNP data, where each row defines a chromosome segment and its predicted parent. Use peaks to Find Interesting Blocks of SNPs To run the peak finder with the default options type $ xo peaks That will read the SNP data from TIGER and write blocks to an output file in CSV format. The options for this step allow you to choose different data file names for both the input and output file and to set an upper limit on the block size: $ xo peaks --help usage: xo peaks [-h] [--snps F] [--output F] [--max_snps N] options: -h, --help show this help message and exit --snps F input (IGER marker) file --output F output file --max_snps N max number of SNPs in a block If --max_snps is not specified the default of 1000 SNPs per block is used. View SNPs in the GUI The gui command has options for specifying the data files to use and a network port used by the GUI: $ xo gui --help usage: xo gui [-h] [--intervals F] [--peaks F] [--port N] options: -h, --help show this help message and exit --intervals F SNP summaries --peaks F blocks saved by peaks.py --port N local port for the Panel server Specify the path to the peak data with --peaks option; the default is peaks.csv (the default output name from the xo peaks command) The other data file used by the GUI is a summary of locations of blocks of SNPs. Specify the path to this file with --intervals ; the default is BSP_TIGER.intervals_dataframe.pickle.gzip Panel, the Python library used to display the GUI, is similar to Jupyter. It creates a server on your local system, and you use the GUI by opening a web browser and connecting to the server. The default port number is 5006, but you can specify a different port number if you need to ( e.g. if you have a different Panel app already using that port). Example The simplest workflow is to create a directory and copy (or link) the two pickled dataframes, using their default file names. Run the peaks command with default options: $ xo peaks It will take a few minutes, but the script will show a status line to indicate it's still working. When it's done there will be a file named peaks.csv in the current directory. Run the gui command: $ xo gui loading interval data loading peak data Launching server at http://localhost:5006 That will read the two data files and start the GUI, which uses a web server connected to port 5606. The server should start your default web browser and show a view of the first chromosome in the data set. If you browser doesn't start automatically, just start the browser, open a new window, and enter the URL printed in the terminal window ( http://localhost:5006 in the example above). Exiting the GUI Close the web browser window, and type ^C in the terminal window where you typed the xo view command. Visualizations The visualization command will read the data, apply the same filters available in the GUI, and display the resulting graphic in a window. Currently there are three different visualizations: a histogram of the number of SNPs in each block a histogram of the length (in base pairs) of each block a histogram of the relative location on the chromosome of each block When running the command type xo vis P where P is the type of plot to make, either count , length , or location . The remaining options are: --peaks F blocks saved by peaks.py --chromosomes P names of chromosomes to use --size N N block size range (#SNPs) --length N N block length range (bp) --coverage N minimum coverage --match require genome match The --peaks option specifies the name of the peak data file (same as in the gui command). Selecting a Subset of the Data The --chromosome option lets you select a subset of the data to visualize by specifying a regular expression to match the chromosome name. The default is BSP.* , meaning \"any chromosome with a name that starts with BSP\" (in other words, all chromosomes). Some other examples of name patterns: pattern chromosomes used BSP-OR.* all oocytes BSP-SR.* all spermatocytes BSP-OR-10.* the chromosomes for the 10 worms with names BSP-OR-001, BSP-OR-002, ... BSP-OR-009. BSP-SR-.*-1 chromosome 1 for all spermatocytes Filter Options The remaining options allow you to specify the filters to use. There is one option for each of the filters shown in the GUI, so the plots that are made by this command are accurate summaries based on settings you make in the GUI. Two of the options ( --size and --length ) correspond to the interval selectors and require you to specify two values, the minimum and maximum slider locations. If you don't specify these options the defaults displayed in the GUI are used: block size from 0 to 100 SNPs, block length from 0 to 10,000 bp. The --coverage option is a single integer based on the location of that slider in the GUI. The default is 0. Use --match option if you clicked the checkbox labeled Genome Match. Example This command generates a histogram of block sizes (number of SNPs) using chromosome 1 from all worms, restricted to SNPs that have a genome match and using only blocks between 1 and 1000 bp long: $ xo vis count --chr 'BSP-.*-1' --match --length 0 1000","title":"Crossover Explorer Documentation"},{"location":"vis/#crossover-explorer-documentation","text":"The crossover explorer is an application that filters and displays SNPs, with the goal of looking for evidence of crossover and non-crossover events in C. elegans genomes.","title":"Crossover Explorer Documentation"},{"location":"vis/#data-files","text":"The application uses two sets of data: BSP_TIGER.marker_dataframe.pickle.gzip is a \"pickled\" and compressed Pandas data frame with the output from TIGER. Each row in the frame describes a SNP, with columns for the chromosome name, location, and the predicted parent genome (N2 or CB4856), and more. BSP_TIGER.intervals_dataframe.pickle.gzip , a summary of the SNP data, where each row defines a chromosome segment and its predicted parent.","title":"Data Files"},{"location":"vis/#use-peaks-to-find-interesting-blocks-of-snps","text":"To run the peak finder with the default options type $ xo peaks That will read the SNP data from TIGER and write blocks to an output file in CSV format. The options for this step allow you to choose different data file names for both the input and output file and to set an upper limit on the block size: $ xo peaks --help usage: xo peaks [-h] [--snps F] [--output F] [--max_snps N] options: -h, --help show this help message and exit --snps F input (IGER marker) file --output F output file --max_snps N max number of SNPs in a block If --max_snps is not specified the default of 1000 SNPs per block is used.","title":"Use peaks to Find Interesting Blocks of SNPs"},{"location":"vis/#view-snps-in-the-gui","text":"The gui command has options for specifying the data files to use and a network port used by the GUI: $ xo gui --help usage: xo gui [-h] [--intervals F] [--peaks F] [--port N] options: -h, --help show this help message and exit --intervals F SNP summaries --peaks F blocks saved by peaks.py --port N local port for the Panel server Specify the path to the peak data with --peaks option; the default is peaks.csv (the default output name from the xo peaks command) The other data file used by the GUI is a summary of locations of blocks of SNPs. Specify the path to this file with --intervals ; the default is BSP_TIGER.intervals_dataframe.pickle.gzip Panel, the Python library used to display the GUI, is similar to Jupyter. It creates a server on your local system, and you use the GUI by opening a web browser and connecting to the server. The default port number is 5006, but you can specify a different port number if you need to ( e.g. if you have a different Panel app already using that port).","title":"View SNPs in the GUI"},{"location":"vis/#example","text":"The simplest workflow is to create a directory and copy (or link) the two pickled dataframes, using their default file names. Run the peaks command with default options: $ xo peaks It will take a few minutes, but the script will show a status line to indicate it's still working. When it's done there will be a file named peaks.csv in the current directory. Run the gui command: $ xo gui loading interval data loading peak data Launching server at http://localhost:5006 That will read the two data files and start the GUI, which uses a web server connected to port 5606. The server should start your default web browser and show a view of the first chromosome in the data set. If you browser doesn't start automatically, just start the browser, open a new window, and enter the URL printed in the terminal window ( http://localhost:5006 in the example above).","title":"Example"},{"location":"vis/#exiting-the-gui","text":"Close the web browser window, and type ^C in the terminal window where you typed the xo view command.","title":"Exiting the GUI"},{"location":"vis/#visualizations","text":"The visualization command will read the data, apply the same filters available in the GUI, and display the resulting graphic in a window. Currently there are three different visualizations: a histogram of the number of SNPs in each block a histogram of the length (in base pairs) of each block a histogram of the relative location on the chromosome of each block When running the command type xo vis P where P is the type of plot to make, either count , length , or location . The remaining options are: --peaks F blocks saved by peaks.py --chromosomes P names of chromosomes to use --size N N block size range (#SNPs) --length N N block length range (bp) --coverage N minimum coverage --match require genome match The --peaks option specifies the name of the peak data file (same as in the gui command).","title":"Visualizations"},{"location":"vis/#selecting-a-subset-of-the-data","text":"The --chromosome option lets you select a subset of the data to visualize by specifying a regular expression to match the chromosome name. The default is BSP.* , meaning \"any chromosome with a name that starts with BSP\" (in other words, all chromosomes). Some other examples of name patterns: pattern chromosomes used BSP-OR.* all oocytes BSP-SR.* all spermatocytes BSP-OR-10.* the chromosomes for the 10 worms with names BSP-OR-001, BSP-OR-002, ... BSP-OR-009. BSP-SR-.*-1 chromosome 1 for all spermatocytes","title":"Selecting a Subset of the Data"},{"location":"vis/#filter-options","text":"The remaining options allow you to specify the filters to use. There is one option for each of the filters shown in the GUI, so the plots that are made by this command are accurate summaries based on settings you make in the GUI. Two of the options ( --size and --length ) correspond to the interval selectors and require you to specify two values, the minimum and maximum slider locations. If you don't specify these options the defaults displayed in the GUI are used: block size from 0 to 100 SNPs, block length from 0 to 10,000 bp. The --coverage option is a single integer based on the location of that slider in the GUI. The default is 0. Use --match option if you clicked the checkbox labeled Genome Match.","title":"Filter Options"},{"location":"vis/#example_1","text":"This command generates a histogram of block sizes (number of SNPs) using chromosome 1 from all worms, restricted to SNPs that have a genome match and using only blocks between 1 and 1000 bp long: $ xo vis count --chr 'BSP-.*-1' --match --length 0 1000","title":"Example"}]}