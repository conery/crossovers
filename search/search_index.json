{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Crossover Explorer The crossover explorer is an application that filters and displays SNPs, with the goal of looking for evidence of crossover and non-crossover events in C. elegans genomes. The top-level application runs three different scripts that implement steps in the overall workflow: a \"peak finder\" script scans a set of SNPs generated by TIGER to look for chromosomal regions that might be the result of crossover or non-crossover events another script presents a graphical user interface that lets users browse the data generated by the peak finder a visualization script creates histograms that summarize the size and location of the regions Data Files The application uses two sets of data: BSP_TIGER.marker_dataframe.pickle.gzip is a \"pickled\" and compressed Pandas data frame with the output from TIGER. Each row in the frame describes a SNP, with columns for the chromosome name, location, and the predicted parent genome (N2 or CB4856), and more. BSP_TIGER.intervals_dataframe.pickle.gzip , a summary of the SNP data, where each row defines a chromosome segment and its predicted parent. We suggest creating a new folder to use for a project directory. Move (or link) the two data files to this folder, then cd to the directory and run the crossover explorer scripts in that directory. Note for Docker users : if you are running the GUI in a Docker container you will bind mount this same directory when starting the container. Shell Commands To run one of the scripts type xo followed by one of the script names ( peaks , gui , or vis ). Each of the scripts has its own help message, which you can see by adding --help to the command. Examples This command prints the help message for the top level xo application: $ xo --help usage: xo [-h] {peaks,gui,vis,post} ... options: -h, --help show this help message and exit subcommands: operation to perform {peaks,gui,vis,post} peaks find peaks in the SNP data gui explore blocks of SNPs vis visualizations based on filtered blocks To see the help message for one of the scripts type xo , the script name, and then --help . This shell command prints the help message for the peaks script: $ xo peaks --help usage: xo peaks [-h] [--snps F] [--output F] [--max_snps N] ... Abbreviating Options The xo scripts, like most modern Unix command line applications, allow users to shorten option names, so that it is only necessary to type enough characters to distinguish one option from another. The full script name ( peaks , gui , or vis ) must be entered completely, but after that any option names can be abbreviated. Example These two commands are equivalent: $ xo peaks --output short_blocks.csv --max_snps 10 $ xo peaks --out short_blocks.csv --m 10","title":"Getting Started"},{"location":"#crossover-explorer","text":"The crossover explorer is an application that filters and displays SNPs, with the goal of looking for evidence of crossover and non-crossover events in C. elegans genomes. The top-level application runs three different scripts that implement steps in the overall workflow: a \"peak finder\" script scans a set of SNPs generated by TIGER to look for chromosomal regions that might be the result of crossover or non-crossover events another script presents a graphical user interface that lets users browse the data generated by the peak finder a visualization script creates histograms that summarize the size and location of the regions","title":"Crossover Explorer"},{"location":"#data-files","text":"The application uses two sets of data: BSP_TIGER.marker_dataframe.pickle.gzip is a \"pickled\" and compressed Pandas data frame with the output from TIGER. Each row in the frame describes a SNP, with columns for the chromosome name, location, and the predicted parent genome (N2 or CB4856), and more. BSP_TIGER.intervals_dataframe.pickle.gzip , a summary of the SNP data, where each row defines a chromosome segment and its predicted parent. We suggest creating a new folder to use for a project directory. Move (or link) the two data files to this folder, then cd to the directory and run the crossover explorer scripts in that directory. Note for Docker users : if you are running the GUI in a Docker container you will bind mount this same directory when starting the container.","title":"Data Files"},{"location":"#shell-commands","text":"To run one of the scripts type xo followed by one of the script names ( peaks , gui , or vis ). Each of the scripts has its own help message, which you can see by adding --help to the command.","title":"Shell Commands"},{"location":"#examples","text":"This command prints the help message for the top level xo application: $ xo --help usage: xo [-h] {peaks,gui,vis,post} ... options: -h, --help show this help message and exit subcommands: operation to perform {peaks,gui,vis,post} peaks find peaks in the SNP data gui explore blocks of SNPs vis visualizations based on filtered blocks To see the help message for one of the scripts type xo , the script name, and then --help . This shell command prints the help message for the peaks script: $ xo peaks --help usage: xo peaks [-h] [--snps F] [--output F] [--max_snps N] ...","title":"Examples"},{"location":"#abbreviating-options","text":"The xo scripts, like most modern Unix command line applications, allow users to shorten option names, so that it is only necessary to type enough characters to distinguish one option from another. The full script name ( peaks , gui , or vis ) must be entered completely, but after that any option names can be abbreviated.","title":"Abbreviating Options"},{"location":"#example","text":"These two commands are equivalent: $ xo peaks --output short_blocks.csv --max_snps 10 $ xo peaks --out short_blocks.csv --m 10","title":"Example"},{"location":"gui/","text":"View SNPs in the GUI The GUI allows users to explore the blocks generated by the peaks command. The window has two parts, as shown by this screenshot: The left side of the screen displays a set of filters which allow you to set limits on sizes and other attributes of blocks. The right side of the window is for graphical displays. Note there are two tabs at the top of this part of the window. The chromosome tab , shown above, displays one chromosome at a time. Clicking the summary tab will change to show plots that summarize all the blocks in the data set. Opening the GUI From the command line run the xo script with the gui command: $ xo gui The GUI is based on a Python library named Panel. It's similar to Jupyter in that it creates a server on your local system, and you use the GUI by opening a web browser and connecting to the server. The default port number is 5006, but you can specify a different port with the --port option if you need to ( e.g. if you have a different web app already using that port). The GUI needs two data files. The first is the CSV file with block descriptions created by the xo peaks command. The default file name is peaks.csv , but you can specify a different name using the --peaks option. The other data file used by the GUI is a summary of locations of blocks of SNPs. The default file name is BSP_TIGER.intervals_dataframe.pickle.gzip , but a different name can be specified using --intervals . Chromosome Display At the top of the chromosome tab you will see a box containing a chromosome name with two buttons on either side. Below that is a \"ribbon\" that classifies regions of the chromosome as having come from the CB4856 parent (in blue) or the N2 parent (in red). The black dots represent the locations of blocks of SNPs identified by the peak finder. The controls allow you to switch to a different chromosome. Click the triangle shaped buttons next to the chromosome name to move to the previous or next chromosome in the data set. If you want to go directly do a different chromosome click on the chromosome name and edit the name there. If the name is valid the display will be updated when you hit the enter key or click somewhere outside the text box. Note: If a chromosome has a lot of blocks there will be a delay before the screen is updated while the app makes all the graphics for the lower part of the display. Below the \"ribbon\" you will see the blocks identified by the peak finder for the current chromosome. This screenshot shows the first three blocks for chromosome BSP-OR-001-4: The circles in each row correspond to the SNPs in that block. The scale below the circles indicates the relative position of each SNP, and the text to the left has an overview of the block. In this example, the first row of circles is for a block that starts 2Mbp into the chromosome. The block has 19 SNPs, spread out over a region 421bp long (the distance between the first and last SNP in the block). The colors of the circles are based on how the HMM in TIGER classified the SNPs. Bright blue and red are where the HMM is confident a SNP is from CB4856 or N2, respectively. Paler blue and red are for SNPs with lower confidence. Gray and yellow are for undetermined or ambiguous SNPs. To the left of each row of circles is a button with a \"reveal\" icon (looks like a greater-than symbol). If you click this button the GUI will show a table based on the data frame for the block, showing all the details of each SNP. Here is the display for block #1 in the example: Note how there are 13 rows, one for each SNP, and that each row corresponds to a circle in the graphic. Most of the circles are gray (\"unknown\") but one is bright red, having been identified as an N2 SNP. Clicking the button again will hide the block. Filters There are four ways to control which SNPs are displayed in the blocks: a block size filter limits the display to contain only blocks that have a number of SNPs between a lower and upper limit a block length filter shows only blocks that have an overall length -- the distance, in base pairs, between the first and last SNP in the block -- within a specified lower and upper limit the minimum coverage filter selects SNPs that are supported by reads (the values in the ref_reads and var_reads columns in the SNP table); a SNP is included in the display if the sum of the numbers in these two columns is greater then a specified limit the genome match filter is either on or off; when it's on, a SNP is included only if the state inferred by the HMM (shown in the hmm_state1 column in the table) matches the base in the chromosome (indicated by the base_geno column). Widgets Each filter has its own \"widget\" on the left side of the GUI that is used to set values for that filter: Block Size Widget Click on the control on the left side of the slider and drag it to set the minimum block size, or click and drag the control on the right to set the maximum block size. As you drag a control the display will update to show the new value. The value won't take effect until you let go of the button. Block Length Widget This widget is another double-sided slider, used the same way as the block size widget, but this one controls the block length. Minimum Coverage Widget This slider has only one button, used to specify the coverage value. You can either drag the button or click anywhere along the length of the slider. Genome Match Widget This widget is a simple check-box. Click inside the box to turn the filter on or off. How Filters are Applied The chromosome display will be updated immediately, as soon you update a widget. All four filters are applied each time the display is updated. Each time the chromosome display is updated -- either by adjusting one of the widgets, or by selecting a new chromosome -- all the filters are applied and the resulting SNPs are used to generate the display. Only those blocks that are within the bounds of the block size and block length filters are shown. Inside the blocks that pass those filters only SNPs that pass the coverage and match filters are shown. Summary Plots The other tab in the graphics panel is named Summary . Click on the tab name to display a set of controls for generating plots based on summarizing filtered blocks across all chromosomes: Chromosome Names The default setting will generate plots using all of the chromosomes. However, if you want to make separate plots for different groups, you can enter a name pattern using regular expression syntax in the text box labeled \"Chromosomes\". The initial value in this box is BSP.* , meaning \"any chromosome with a name that starts with BSP\" (in other words, all chromosomes). Some other examples of name patterns: pattern chromosomes used BSP-OR.* all oocytes BSP-SR.* all spermatocytes BSP-OR-10.* the 10 worms with names BSP-OR-001, BSP-OR-002, ... BSP-OR-009. BSP-SR-.*-1 chromosome 1 for all spermatocytes Buttons The three summary plots are all histograms. Click the button for the summary you want, based on block size, block length, or block location (relative location on the chromosome). Note that the histograms will be based on filtered data. The application first selects the chromosomes that have names that match the pattern in the \"Chromosomes\" box. It then applies all the filters, using the current settings in the filter widgets. The result blocks are then used to generate the histograms. When the graph has been generated (it may take a few seconds) it will be displayed in the GUI: Exiting the GUI Close the web browser window. If you started the GUI by typing xo gui on the command line you can stop it by clicking in the terminal window and typing \u2303C (control-C).","title":"View SNPs in the GUI"},{"location":"gui/#view-snps-in-the-gui","text":"The GUI allows users to explore the blocks generated by the peaks command. The window has two parts, as shown by this screenshot: The left side of the screen displays a set of filters which allow you to set limits on sizes and other attributes of blocks. The right side of the window is for graphical displays. Note there are two tabs at the top of this part of the window. The chromosome tab , shown above, displays one chromosome at a time. Clicking the summary tab will change to show plots that summarize all the blocks in the data set.","title":"View SNPs in the GUI"},{"location":"gui/#opening-the-gui","text":"From the command line run the xo script with the gui command: $ xo gui The GUI is based on a Python library named Panel. It's similar to Jupyter in that it creates a server on your local system, and you use the GUI by opening a web browser and connecting to the server. The default port number is 5006, but you can specify a different port with the --port option if you need to ( e.g. if you have a different web app already using that port). The GUI needs two data files. The first is the CSV file with block descriptions created by the xo peaks command. The default file name is peaks.csv , but you can specify a different name using the --peaks option. The other data file used by the GUI is a summary of locations of blocks of SNPs. The default file name is BSP_TIGER.intervals_dataframe.pickle.gzip , but a different name can be specified using --intervals .","title":"Opening the GUI"},{"location":"gui/#chromosome-display","text":"At the top of the chromosome tab you will see a box containing a chromosome name with two buttons on either side. Below that is a \"ribbon\" that classifies regions of the chromosome as having come from the CB4856 parent (in blue) or the N2 parent (in red). The black dots represent the locations of blocks of SNPs identified by the peak finder. The controls allow you to switch to a different chromosome. Click the triangle shaped buttons next to the chromosome name to move to the previous or next chromosome in the data set. If you want to go directly do a different chromosome click on the chromosome name and edit the name there. If the name is valid the display will be updated when you hit the enter key or click somewhere outside the text box. Note: If a chromosome has a lot of blocks there will be a delay before the screen is updated while the app makes all the graphics for the lower part of the display. Below the \"ribbon\" you will see the blocks identified by the peak finder for the current chromosome. This screenshot shows the first three blocks for chromosome BSP-OR-001-4: The circles in each row correspond to the SNPs in that block. The scale below the circles indicates the relative position of each SNP, and the text to the left has an overview of the block. In this example, the first row of circles is for a block that starts 2Mbp into the chromosome. The block has 19 SNPs, spread out over a region 421bp long (the distance between the first and last SNP in the block). The colors of the circles are based on how the HMM in TIGER classified the SNPs. Bright blue and red are where the HMM is confident a SNP is from CB4856 or N2, respectively. Paler blue and red are for SNPs with lower confidence. Gray and yellow are for undetermined or ambiguous SNPs. To the left of each row of circles is a button with a \"reveal\" icon (looks like a greater-than symbol). If you click this button the GUI will show a table based on the data frame for the block, showing all the details of each SNP. Here is the display for block #1 in the example: Note how there are 13 rows, one for each SNP, and that each row corresponds to a circle in the graphic. Most of the circles are gray (\"unknown\") but one is bright red, having been identified as an N2 SNP. Clicking the button again will hide the block.","title":"Chromosome Display"},{"location":"gui/#filters","text":"There are four ways to control which SNPs are displayed in the blocks: a block size filter limits the display to contain only blocks that have a number of SNPs between a lower and upper limit a block length filter shows only blocks that have an overall length -- the distance, in base pairs, between the first and last SNP in the block -- within a specified lower and upper limit the minimum coverage filter selects SNPs that are supported by reads (the values in the ref_reads and var_reads columns in the SNP table); a SNP is included in the display if the sum of the numbers in these two columns is greater then a specified limit the genome match filter is either on or off; when it's on, a SNP is included only if the state inferred by the HMM (shown in the hmm_state1 column in the table) matches the base in the chromosome (indicated by the base_geno column).","title":"Filters"},{"location":"gui/#widgets","text":"Each filter has its own \"widget\" on the left side of the GUI that is used to set values for that filter:","title":"Widgets"},{"location":"gui/#block-size-widget","text":"Click on the control on the left side of the slider and drag it to set the minimum block size, or click and drag the control on the right to set the maximum block size. As you drag a control the display will update to show the new value. The value won't take effect until you let go of the button.","title":"Block Size Widget"},{"location":"gui/#block-length-widget","text":"This widget is another double-sided slider, used the same way as the block size widget, but this one controls the block length.","title":"Block Length Widget"},{"location":"gui/#minimum-coverage-widget","text":"This slider has only one button, used to specify the coverage value. You can either drag the button or click anywhere along the length of the slider.","title":"Minimum Coverage Widget"},{"location":"gui/#genome-match-widget","text":"This widget is a simple check-box. Click inside the box to turn the filter on or off.","title":"Genome Match Widget"},{"location":"gui/#how-filters-are-applied","text":"The chromosome display will be updated immediately, as soon you update a widget. All four filters are applied each time the display is updated. Each time the chromosome display is updated -- either by adjusting one of the widgets, or by selecting a new chromosome -- all the filters are applied and the resulting SNPs are used to generate the display. Only those blocks that are within the bounds of the block size and block length filters are shown. Inside the blocks that pass those filters only SNPs that pass the coverage and match filters are shown.","title":"How Filters are Applied"},{"location":"gui/#summary-plots","text":"The other tab in the graphics panel is named Summary . Click on the tab name to display a set of controls for generating plots based on summarizing filtered blocks across all chromosomes:","title":"Summary Plots"},{"location":"gui/#chromosome-names","text":"The default setting will generate plots using all of the chromosomes. However, if you want to make separate plots for different groups, you can enter a name pattern using regular expression syntax in the text box labeled \"Chromosomes\". The initial value in this box is BSP.* , meaning \"any chromosome with a name that starts with BSP\" (in other words, all chromosomes). Some other examples of name patterns: pattern chromosomes used BSP-OR.* all oocytes BSP-SR.* all spermatocytes BSP-OR-10.* the 10 worms with names BSP-OR-001, BSP-OR-002, ... BSP-OR-009. BSP-SR-.*-1 chromosome 1 for all spermatocytes","title":"Chromosome Names"},{"location":"gui/#buttons","text":"The three summary plots are all histograms. Click the button for the summary you want, based on block size, block length, or block location (relative location on the chromosome). Note that the histograms will be based on filtered data. The application first selects the chromosomes that have names that match the pattern in the \"Chromosomes\" box. It then applies all the filters, using the current settings in the filter widgets. The result blocks are then used to generate the histograms. When the graph has been generated (it may take a few seconds) it will be displayed in the GUI:","title":"Buttons"},{"location":"gui/#exiting-the-gui","text":"Close the web browser window. If you started the GUI by typing xo gui on the command line you can stop it by clicking in the terminal window and typing \u2303C (control-C).","title":"Exiting the GUI"},{"location":"peaks/","text":"Peak Finder This script scans a chromosome to look for sequences of SNPs that are potentially associated with crossover or non-crossover events. Searching for Blocks of SNPs The name \"peak finder\" comes from the method we use to look for these events. We define a signal function that is based on counting the number of SNPs. At any location in the chromosome, let f be the total number of CB4856 SNPs seen up to that point, and let g be the total number of N2 SNPs seen to that point. Then our signal function is simply f \u2212 g . As we move across the chromosome, the signal goes up whenever we encounter a CB4856 SNP and goes down whenever we see an N2 SNP. As an example, suppose a chromosome has a single crossover point: before the location of the point all the SNPs are from the CB4856 parent, and after this location all the SNPs are from the N2 parent. The signal will increase monotonically up to location of the point and then decrease monotonically. The signal has one peak, at exactly the location where the crossover occurred. Non-Crossovers If there are non-crossover events, we expect to see small regions where SNPs from one parent occur somewhere in the middle of a long sequence from the other parent. These will appear as small \"blips\" in the signal: a short drop in the region that is otherwise increasing, or a short rise in the region that is otherwise decreasing. We use the find_peaks function from the NumPy signal processing library to look for these regions in our signal function. We define a block to be the set of SNPs from the start to the end of one of the regions identified by the peak finder. Look for Valleys as Well as Peaks Some chromosomes will have N2 SNPs before the main crossover point and CB4856 SNPs after that. In this case the signal decreases before the crossover and increases after that point, so the crossover is at a location where there is a \"valley\" and not a peak. The NumPy function returns locations of both peaks and valleys, and our code saves locations from each type of \"blip\". Maximum Block Size If a chromosome has a single crossover, the peak finding algorithm will think the sequence from the start of the chromosome up to the crossover location is a block, and the sequence from the crossover point to the end of the chromosome is another block. To prevent these two blocks from being included in the output the script has a block size limit, which is the maximum number of SNPs that can be included in a block. There are also \"pathological\" cases where there are small blips inside a longer region that also stands out from the background. In these situations the peak finder reports the coordinates of the longer enclosing block along with the locations of the smaller blocks nested inside. Choosing a smaller block size limit will prevent the enclosing block from being included in the output while still including the smaller blocks. No Crossovers Some chromosomes in the data set have no crossover points. In these situations the peak finder will not find a peak or a valley and the output file will have no blocks for this chromosome. Shell Command To run the peak finder with the default options type $ xo peaks That will read the SNP data from TIGER and write blocks to an output file in CSV format. The default input file name is BSP_TIGER.marker_dataframe.pickle.gzip . A different file name can be specified with the --snps option. The default output file name is peaks.csv . A different name can be specified with --output . The default block size limit is 1000 SNPs. A different value can be specified with the --max_snps option. Output File The data written by this command is saved in a CSV file. Each row in the file is a SNP that occurs in a block identified by the peak finder. The lines are exact copies of the lines from the original input file, including the original SNP ID in the first column. One new column has been appended to each line. This column is a block ID number, which allows the GUI and visualization commands to group SNPs by blocks.","title":"Peak Finder"},{"location":"peaks/#peak-finder","text":"This script scans a chromosome to look for sequences of SNPs that are potentially associated with crossover or non-crossover events.","title":"Peak Finder"},{"location":"peaks/#searching-for-blocks-of-snps","text":"The name \"peak finder\" comes from the method we use to look for these events. We define a signal function that is based on counting the number of SNPs. At any location in the chromosome, let f be the total number of CB4856 SNPs seen up to that point, and let g be the total number of N2 SNPs seen to that point. Then our signal function is simply f \u2212 g . As we move across the chromosome, the signal goes up whenever we encounter a CB4856 SNP and goes down whenever we see an N2 SNP. As an example, suppose a chromosome has a single crossover point: before the location of the point all the SNPs are from the CB4856 parent, and after this location all the SNPs are from the N2 parent. The signal will increase monotonically up to location of the point and then decrease monotonically. The signal has one peak, at exactly the location where the crossover occurred.","title":"Searching for Blocks of SNPs"},{"location":"peaks/#non-crossovers","text":"If there are non-crossover events, we expect to see small regions where SNPs from one parent occur somewhere in the middle of a long sequence from the other parent. These will appear as small \"blips\" in the signal: a short drop in the region that is otherwise increasing, or a short rise in the region that is otherwise decreasing. We use the find_peaks function from the NumPy signal processing library to look for these regions in our signal function. We define a block to be the set of SNPs from the start to the end of one of the regions identified by the peak finder.","title":"Non-Crossovers"},{"location":"peaks/#look-for-valleys-as-well-as-peaks","text":"Some chromosomes will have N2 SNPs before the main crossover point and CB4856 SNPs after that. In this case the signal decreases before the crossover and increases after that point, so the crossover is at a location where there is a \"valley\" and not a peak. The NumPy function returns locations of both peaks and valleys, and our code saves locations from each type of \"blip\".","title":"Look for Valleys as Well as Peaks"},{"location":"peaks/#maximum-block-size","text":"If a chromosome has a single crossover, the peak finding algorithm will think the sequence from the start of the chromosome up to the crossover location is a block, and the sequence from the crossover point to the end of the chromosome is another block. To prevent these two blocks from being included in the output the script has a block size limit, which is the maximum number of SNPs that can be included in a block. There are also \"pathological\" cases where there are small blips inside a longer region that also stands out from the background. In these situations the peak finder reports the coordinates of the longer enclosing block along with the locations of the smaller blocks nested inside. Choosing a smaller block size limit will prevent the enclosing block from being included in the output while still including the smaller blocks.","title":"Maximum Block Size"},{"location":"peaks/#no-crossovers","text":"Some chromosomes in the data set have no crossover points. In these situations the peak finder will not find a peak or a valley and the output file will have no blocks for this chromosome.","title":"No Crossovers"},{"location":"peaks/#shell-command","text":"To run the peak finder with the default options type $ xo peaks That will read the SNP data from TIGER and write blocks to an output file in CSV format. The default input file name is BSP_TIGER.marker_dataframe.pickle.gzip . A different file name can be specified with the --snps option. The default output file name is peaks.csv . A different name can be specified with --output . The default block size limit is 1000 SNPs. A different value can be specified with the --max_snps option.","title":"Shell Command"},{"location":"peaks/#output-file","text":"The data written by this command is saved in a CSV file. Each row in the file is a SNP that occurs in a block identified by the peak finder. The lines are exact copies of the lines from the original input file, including the original SNP ID in the first column. One new column has been appended to each line. This column is a block ID number, which allows the GUI and visualization commands to group SNPs by blocks.","title":"Output File"},{"location":"vis/","text":"Generate Plots from the Command Line The xo vis command is an alternate method for generating the histograms that summarize blocks across all the chromosomes. Command Line Options The command that runs the program has options to specify settings for each of the filters. To see the complete list of options use the --help option: $ xo vis --help usage: xo vis [-h] [--peaks F] [--chromosomes P] [--size N N] [--length N N] [--coverage N] [--match] [--save F] P positional arguments: P type of plot to make ['count', 'length', 'location'] options: -h, --help show this help message and exit --peaks F blocks saved by peaks.py --chromosomes P chromosome name pattern --size N N block size range (#SNPs) --length N N block length range (bp) --coverage N minimum coverage --match require genome match --save F write summary dataframe to this file According to this output, each time we run the program we have to specify a value for P , which stands for \"plot type.\" The possible values are count , length , and location , which correspond to the three kinds of histograms. Five of the options correspond to the filter widgets and chromosome name widget displayed in the GUI: Use --chromosomes to specify a chromosome name pattern. If you plan to use this option read the section below on \"name patterns in shell commands.\" Use --size and --length to specify block size and length limits. Note that both of these options require two integer arguments, corresponding to the settings of the double-ended slider in the GUI. The --coverage option takes a single integer argument, which corresponds to the value of the coverage slider in the GUI. Including --match on the command line is the same as clicking the toggle button in the match widget. The remaining two options are for specifying file names. The --peaks option can be used to specify an alternative to the default peaks.csv file with the output from the peaks command. Use --save to have the application write the size and location of each block to a CSV file. Default Filter Settings If a filter option is not specified on the command line the default value will be used. Each default is the same as the values shown in the GUI when it first starts. Option Description Default chromosome regular expression for chromosome names BSP.* size block size (number of SNPs) 0 to 10 length block length (base pairs) 0 1o 10000 coverage minimum SNP coverage 0 match require genome match False (unchecked) The default is BSP.* , meaning \"all chromosomes.\" If these options are not specified the defaults are the same as the initial settings shown in the GUI: 0 to 10 for block size, and 0 to 10,000 for block length. Name Patterns in Shell Commands The argument for the --chromosome option is a regular expression, and these expressions often contain asterisks. For example, the pattern BSP-.*-1 means \"all names that start with BSP- and end with -1 with any characters in between\", in other words, \"chromosome 1 from all worms.\" We need to be careful when we use this pattern in a shell command. When a shell sees an asterisk, it thinks you are typing the name of a file, and it tries to look for all files with names that match the pattern. To prevent this behavior, we have to enclose the pattern in single quotes . This is how we would create a histogram of block sizes using only chromosome 1 from each worm: $ xo vis count --chromosomes 'BSP-.*-1' Note: File name expansion -- called \"globbing\" in the Unix world -- is done by the shell. The shell tries to look for files with matching names before it even starts the xo command. If you leave out the quotes you're likely to see an error message like this: zsh: no matches found: BSP-.*-1 Notice how this error is coming from the shell ( zsh in this case, the default shell on macOS) and not from the xo program, which is never even started. Examples For other examples of chromosome name patterns see the Chromosome Names section of the GUI documentation.","title":"Generate Plots from the Command Line"},{"location":"vis/#generate-plots-from-the-command-line","text":"The xo vis command is an alternate method for generating the histograms that summarize blocks across all the chromosomes.","title":"Generate Plots from the Command Line"},{"location":"vis/#command-line-options","text":"The command that runs the program has options to specify settings for each of the filters. To see the complete list of options use the --help option: $ xo vis --help usage: xo vis [-h] [--peaks F] [--chromosomes P] [--size N N] [--length N N] [--coverage N] [--match] [--save F] P positional arguments: P type of plot to make ['count', 'length', 'location'] options: -h, --help show this help message and exit --peaks F blocks saved by peaks.py --chromosomes P chromosome name pattern --size N N block size range (#SNPs) --length N N block length range (bp) --coverage N minimum coverage --match require genome match --save F write summary dataframe to this file According to this output, each time we run the program we have to specify a value for P , which stands for \"plot type.\" The possible values are count , length , and location , which correspond to the three kinds of histograms. Five of the options correspond to the filter widgets and chromosome name widget displayed in the GUI: Use --chromosomes to specify a chromosome name pattern. If you plan to use this option read the section below on \"name patterns in shell commands.\" Use --size and --length to specify block size and length limits. Note that both of these options require two integer arguments, corresponding to the settings of the double-ended slider in the GUI. The --coverage option takes a single integer argument, which corresponds to the value of the coverage slider in the GUI. Including --match on the command line is the same as clicking the toggle button in the match widget. The remaining two options are for specifying file names. The --peaks option can be used to specify an alternative to the default peaks.csv file with the output from the peaks command. Use --save to have the application write the size and location of each block to a CSV file.","title":"Command Line Options"},{"location":"vis/#default-filter-settings","text":"If a filter option is not specified on the command line the default value will be used. Each default is the same as the values shown in the GUI when it first starts. Option Description Default chromosome regular expression for chromosome names BSP.* size block size (number of SNPs) 0 to 10 length block length (base pairs) 0 1o 10000 coverage minimum SNP coverage 0 match require genome match False (unchecked) The default is BSP.* , meaning \"all chromosomes.\" If these options are not specified the defaults are the same as the initial settings shown in the GUI: 0 to 10 for block size, and 0 to 10,000 for block length.","title":"Default Filter Settings"},{"location":"vis/#name-patterns-in-shell-commands","text":"The argument for the --chromosome option is a regular expression, and these expressions often contain asterisks. For example, the pattern BSP-.*-1 means \"all names that start with BSP- and end with -1 with any characters in between\", in other words, \"chromosome 1 from all worms.\" We need to be careful when we use this pattern in a shell command. When a shell sees an asterisk, it thinks you are typing the name of a file, and it tries to look for all files with names that match the pattern. To prevent this behavior, we have to enclose the pattern in single quotes . This is how we would create a histogram of block sizes using only chromosome 1 from each worm: $ xo vis count --chromosomes 'BSP-.*-1' Note: File name expansion -- called \"globbing\" in the Unix world -- is done by the shell. The shell tries to look for files with matching names before it even starts the xo command. If you leave out the quotes you're likely to see an error message like this: zsh: no matches found: BSP-.*-1 Notice how this error is coming from the shell ( zsh in this case, the default shell on macOS) and not from the xo program, which is never even started.","title":"Name Patterns in Shell Commands"},{"location":"vis/#examples","text":"For other examples of chromosome name patterns see the Chromosome Names section of the GUI documentation.","title":"Examples"}]}